use crate::ast::*;

grammar;

match {
    r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"#[^\n\r]*[\n\r]*" => { }, // Skip `#` comments

    r"[a-zA-Z_][a-zA-Z_0-9]*",

    "->",
    ",",
    ";",
    ":",
    "(",
    ")",
    "{",
    "}",
    "{|",
    "|}",
    "!",
    "!=",
    "Protocol",
    "Types",
    "Knowledge",
    "Actions",
    "Goals",
    "Agent",
    "Symmetric_key",
    "Function",
    "Number",
    "Public_key",
    "authenticates",
    "on",
    "secret",
    "between",
    "weakly",
    "guessable",
    "where",
}

// Sep<S, T>: Vec<T> = {
//     <mut v:(<T> S)*> <e:T?> => match e {
//         None => v,
//         Some(e) => {
//             v.push(e);
//             v
//         }
//     }
// };
Sep<S, T>: Vec<T> = {
    <mut xs:(<T> S)*> <x:T> => {
        xs.push(x);
        xs
    }
};

pub Document: Document<&'input str> = <name:Protocol> <types:Types> <knowledge:Knowledge> <actions:Actions> <goals:Goals> =>
    Document { <> };

Protocol: Ident<&'input str> = "Protocol" ":" <Ident>;

Types: Vec<(TypesKey, Vec<Ident<&'input str>>)> = "Types" ":" <Sep<";", (TypesKey Sep<",", Ident>)>>;
TypesKey: TypesKey = {
    "Agent"         => TypesKey::Agent,
    "Number"        => TypesKey::Number,
    "Symmetric_key" => TypesKey::SymmetricKey,
    "Public_key"    => TypesKey::PublicKey,
    "Function"      => TypesKey::Function,
};

Flag<T>: bool = T? => <>.is_some();

Where: Where<&'input str> = <a:Ident> "!=" <b:Ident> => Where::NotEqual(a,b);
Wheres: Vec<Where<&'input str>> = "where" <Sep<",",Where>>;

Knowledge: Knowledge<&'input str> = "Knowledge" ":" <agents:Sep<";", (<Ident> ":" <Sep<",",Term>>)>> <wheres:Wheres?> => Knowledge { agents, wheres: wheres.unwrap_or_default() };

Actions: Vec<Action<&'input str>> = "Actions" ":" <Action*>;
Action: Action<&'input str> =
    <from:Ident> "->" <to:Ident> ":" <terms:Sep<",", Term>> => Action { <> };

Goals: Vec<Goal<&'input str>> = "Goals" ":" <Goal*>;


pub Goal: Goal<&'input str> = {
    <a:Ident> <weakly:Flag<"weakly">> "authenticates" <b:Ident> "on" <terms:Sep<",", Term>> =>
        Goal::Authenticates { <> },
    <terms:Terms> <guessable:Flag<"guessable">> "secret" "between" <agents:Sep<",", Ident>> =>
        Goal::SecretBetween { <> },
};

pub Terms: Vec<Term<&'input str>> = Sep<",", Term>;
pub Term: Term<&'input str> = {
    <Ident> => Term::Var(<>),
    <Ident> "(" <Sep<",", Term>> ")" => Term::Fun(<>),
    "{|" <terms:Sep<",", Term>> "|}" "(" <key:Term> ")" => Term::SymEnc(terms, Box::new(key)),
    "{|" <terms:Sep<",", Term>> "|}" <key:Term> => Term::SymEnc(terms, Box::new(key)),
    "{"  <terms:Sep<",", Term>>  "}" "(" <key:Term> ")" => Term::AsymEnc(terms, Box::new(key)),
    "{"  <terms:Sep<",", Term>>  "}" <key:Term> => Term::AsymEnc(terms, Box::new(key)),
};

pub NegTerms: Vec<(Term<&'input str>, bool)> = Sep<",", NegTerm>;
pub NegTerm: (Term<&'input str>, bool) = {
    "!" <Term> => (<>, false),
    <Term> => (<>, true),
}

Ident: Ident<&'input str> = <l:@L> <i:r"[a-zA-Z_][a-zA-Z_0-9]*"> <r:@R> => Ident(i, (l, r - l).into());
